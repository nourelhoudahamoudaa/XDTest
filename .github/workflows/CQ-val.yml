name: Construct CQ test cases

on: 
  workflow_dispatch:

jobs:
  validate-CQ:
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout V2
        uses: actions/checkout@v2
      
      - name: Construct CQ test cases
        run: |
          echo "$cqPath"
          cqPath="XDTesting/AnimalBehavior/Animal/CompetencyQuestions.txt"
          cqRequirements=$(grep -i '[CQ][0-9][0-9]*:\s' $cqPath)
          
          echo "$sparqlPath"
          sparqlPath="XDTesting/AnimalBehavior/Animal/SPARQLQueries.txt"
          sparqlCQRequirements=$(grep -i '[SQCQ][0-9][0-9]*:\s' $sparqlPath)
          
          echo "$erPath"
          erPath="XDTesting/AnimalBehavior/Animal/ExpectedResults.txt"
          erRequirements=$(grep -i '[ER][0-9][0-9]*:\s' $erPath)
          
          base="https://raw.githubusercontent.com/"
          base1=$(git config --get remote.origin.url | sed 's/.*\/\([^ ]*\/[^.]*\).*/\1/')
          
          echo "$MPbase"
          MPbase="/main/XDTesting/AnimalBehavior/Animal/Animal.owl"
          
          echo "$tdbase"
          tdbase="/main/XDTesting/AnimalBehavior/Animal/SPARQLUnitTest/CQTestData/"
          
          echo "$tcbase"
          tcbase="/main/XDTesting/AnimalBehavior/Animal/SPARQLUnitTest/CQTestCase/"
          
          echo "$mp"
          mp="$base$base1$MPbase"
          
          echo "$cqtd"
          cqtd="$base$base1$tdbase"
          
          echo "$cqtc"
          cqtc="$base$base1$tcbase"
          
          mpPrefix="@prefix mp: < ${mp} > ."
          tdPrefix="@prefix td: < ${cqtd} > ."
          tcPrefix="@prefix mp: < ${cqtc} > ."
          
          echo '@prefix owlunit: <https://w3id.org/OWLunit/ontology/> . ' > cqTemplate.txt
          echo $mpPrefix >> cqTemplate.txt 
          echo $tdPrefix >> cqTemplate.txt 
          echo $tcPrefix >> cqTemplate.txt 
          echo 'tc:01 a owlunit:CompetencyQuestionVerification ; owlunit:hasCompetencyQuestion "' >> cqTemplate.txt 
          
          echo "$cqRequirements" > "cqRequirements.txt"
          while read line; do
            CQid=${line//[!0-9]/}
            if [[ $line =~ :(.+) ]]; then
              CQstrresult=${BASH_REMATCH[1]}
              echo $CQstrresult >> cqTemplate.txt 
              echo ' "; owlunit:hasSPARQLUnitTest " ' >> cqTemplate.txt 
            else
              echo "unable to parse string $line"
            fi
          done <cqRequirements.txt
          
          echo "$sparqlCQRequirements" > "sparqlCQRequirements.txt"
            while read line; do
              SQid=${line//[!0-9]/}
              if [[ $line =~ :(.+) ]]; then
                SQstrresult=${BASH_REMATCH[1]}
              fi
            done <sparqlCQRequirements.txt
          
          if [[ $CQid = $SQid ]]; then
            echo $SQstrresult >> cqTemplate.txt 
            echo ' " ; owlunit:hasInputData td:CQDataSet.ttl ; owlunit:hasInputTestDataCategory owlunit:ToyDataset ; owlunit:hasExpectedResult " ' >> cqTemplate.txt  
          else
            echo "No matching SPARQL query"
          fi
          
          echo "$erRequirements" > "erRequirements.txt"
            while read line; do
              ERid=${line//[!0-9]/}
              if [[ $line =~ :(.+) ]]; then
                ERstrresult=${BASH_REMATCH[1]}
              fi
            done <erRequirements.txt
            
          if [[ $CQid = $ERid ]]; then
            echo $ERstrresult >> cqTemplate.txt 
            echo ' "; owlunit:testsOntology mp: . ' >> cqTemplate.txt  
          else
            echo "No matching expected result"
          fi
          
          cat cqTemplate.txt
          cp cqTemplate.txt XDTesting/AnimalBehavior/Animal/SPARQLUnitTest/CQTestCase/CQTestCase.ttl
      
      - name: Pull-to-master
        uses: peter-evans/create-pull-request@v3
          
        
